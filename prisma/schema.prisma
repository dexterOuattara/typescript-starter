// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String   @unique
  hash      String
  telephone String
  gender    String // PATIENT STANDARDIST ADMIN STAFF
  role      String // MALE FEMALE
  photo     String?  @default("default.png")
  birthday  DateTime

  referents Referent[]
  qrcodes   Qrcode[]
  articles  Article[]
  tickets   Ticket[]
  members   UserConstant[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("users")
}

model Referent {
  id        Int     @id @unique @default(autoincrement())
  firstName String?
  lastName  String?
  email     String
  telephone String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("referents")
}

model Qrcode {
  id   Int     @id @default(autoincrement())
  code String? @unique

  status Boolean  @default(false)
  queue Boolean  @default(false)

  userId Int
  user   User @relation(fields: [userId], references: [id])

 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("qrcodes")
}

model Article {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String?
  body        String

  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("articles")
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  photo       String?  @default("default.png")
  tickets     Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model Ticket {
  id        Int
  userId    Int
  serviceId Int
  priority  String // LOW NORMAL CRITICAL

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, serviceId])
}

model Constant {
  id              Int    @id @default(autoincrement())
  temp            Int
  weight          Int
  tensionArterial Int
  observation     String

  // Relation fields
  members UserConstant[]

  @@map("constants")
}

model UserConstant {
  id Int

  userId Int
  user   User @relation(fields: [userId], references: [id])

  constantId Int
  Constant   Constant @relation(fields: [constantId], references: [id])

  @@id([userId, constantId])
}

// enum UserRole {
//   PATIENT
//   STANDARDIST
//   ADMIN
//   STAFF
// }

// enum Gender {
//   MALE
//   FEMALE
// }

// enum Priority {
//   LOW
//   NORMAL
//   CRITICAL
// }
